trigger:
  branches:
    include:
      - '*'
  tags:
    include:
      - 'v*'

strategy:
  matrix:
    MacOs CPython3.6:
      image: 'macos-latest'
      python.version: '3.6'
      python.architecture: 'x64'
      rust.target: 'x86_64-apple-darwin'
    MacOs CPython3.7:
      image: 'macos-latest'
      python.version: '3.7'
      python.architecture: 'x64'
      rust.target: 'x86_64-apple-darwin'
    MacOs CPython3.8:
      image: 'macos-latest'
      python.version: '3.8'
      python.architecture: 'x64'
      rust.target: 'x86_64-apple-darwin'
    MacOs CPython3.9:
      image: 'macos-latest'
      python.version: '3.9'
      python.architecture: 'x64'
      rust.target: 'x86_64-apple-darwin'
    MacOs PyPy3:
      image: 'macos-latest'
      python.version: 'pypy3'
      python.architecture: 'x64'
    Ubuntu CPython3.6:
      image: 'ubuntu-latest'
      python.version: '3.6'
      python.architecture: 'x64'
      rust.target: 'x86_64-unknown-linux-gnu'
    Ubuntu CPython3.7:
      image: 'ubuntu-latest'
      python.version: '3.7'
      python.architecture: 'x64'
      rust.target: 'x86_64-unknown-linux-gnu'
    Ubuntu CPython3.8:
      image: 'ubuntu-latest'
      python.version: '3.8'
      python.architecture: 'x64'
      rust.target: 'x86_64-unknown-linux-gnu'
    Ubuntu CPython3.9:
      image: 'ubuntu-latest'
      python.version: '3.9'
      python.architecture: 'x64'
      rust.target: 'x86_64-unknown-linux-gnu'
    Ubuntu PyPy3:
      image: 'ubuntu-latest'
      python.version: 'pypy3'
      python.architecture: 'x64'
    Windows CPython3.6 (x86):
      image: 'windows-latest'
      python.version: '3.6'
      python.architecture: 'x86'
      rust.target: 'i686-pc-windows-msvc'
    Windows CPython3.6 (x64):
      image: 'windows-latest'
      python.version: '3.6'
      python.architecture: 'x64'
      rust.target: 'x86_64-pc-windows-msvc'
    Windows CPython3.7 (x86):
      image: 'windows-latest'
      python.version: '3.7'
      python.architecture: 'x86'
      rust.target: 'i686-pc-windows-msvc'
    Windows CPython3.7 (x64):
      image: 'windows-latest'
      python.version: '3.7'
      python.architecture: 'x64'
      rust.target: 'x86_64-pc-windows-msvc'
    Windows CPython3.8 (x86):
      image: 'windows-latest'
      python.version: '3.8'
      python.architecture: 'x86'
      rust.target: 'i686-pc-windows-msvc'
    Windows CPython3.8 (x64):
      image: 'windows-latest'
      python.version: '3.8'
      python.architecture: 'x64'
      rust.target: 'x86_64-pc-windows-msvc'
    Windows CPython3.9 (x86):
      image: 'windows-latest'
      python.version: '3.9'
      python.architecture: 'x86'
      rust.target: 'i686-pc-windows-msvc'
    Windows CPython3.9 (x64):
      image: 'windows-latest'
      python.version: '3.9'
      python.architecture: 'x64'
      rust.target: 'x86_64-pc-windows-msvc'
    Windows PyPy3:
      image: 'windows-latest'
      python.version: 'pypy3'
      python.architecture: 'x86'

pool:
  vmImage: $(image)

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: '$(python.architecture)'
  - bash: rustup target install $RUST_TARGET
    displayName: 'Install Rust compilation target'
    condition: and(succeeded(), startsWith(variables['python.version'], '3.'))
  - bash: python -m pip install --upgrade pip setuptools
    displayName: 'Install packaging tools'
  - bash: python setup.py develop
    displayName: 'Install in editable mode'
    env:
      CARGO_INCREMENTAL: 0
      RUSTFLAGS: -Zprofile -Ccodegen-units=1 -Copt-level=0 -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort
  - bash: python -m pip install --upgrade coverage codecov
    displayName: 'Install coverage dependencies'
  - bash: coverage run -m doctest README.md
    displayName: 'Run doctests'
  - bash: python -m pip install -r requirements-tests.txt
    displayName: 'Install tests dependencies'
  - bash: coverage run --append -m pytest
    displayName: 'Run tests'
  - bash: coverage xml
    displayName: 'Collect coverage'
  - bash: python -m codecov -f coverage.xml -X gcov --build "$AGENT_JOBNAME"
    condition: succeeded()
    displayName: 'Upload coverage'
    env:
      CODECOV_TOKEN: $(CODECOV_TOKEN)
  - bash: cargo install grcov
    condition: and(succeeded(), startsWith(variables['python.version'], '3.'))
    displayName: 'Install Rust coverage dependencies'
  - bash: grcov target -s . -t cobertura --llvm --branch --ignore-not-existing --ignore "/*" -o coverage_rust.xml
    condition: and(succeeded(), startsWith(variables['python.version'], '3.'))
    displayName: 'Collect Rust coverage'
  - bash: python -m codecov -f coverage_rust.xml -X gcov --build "$AGENT_JOBNAME"
    condition: and(succeeded(), startsWith(variables['python.version'], '3.'))
    displayName: 'Upload Rust coverage'
    env:
      CODECOV_TOKEN: $(CODECOV_TOKEN)
  - bash: python -m pip install --upgrade cibuildwheel
    condition: and(succeeded(), startsWith(variables['python.version'], '3.'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Install build dependencies'
  - bash: rm $(python -c 'import glob;from importlib.machinery import EXTENSION_SUFFIXES; print(*set(sum([glob.glob("**/*{}".format(suffix)) for suffix in EXTENSION_SUFFIXES], [])), end="")')
    condition: and(succeeded(), startsWith(variables['python.version'], '3.'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Pre-build'
  - bash: python setup.py sdist
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Build source distribution'
  - bash: cibuildwheel --output-dir dist
    condition: and(succeeded(), startsWith(variables['python.version'], '3.'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Build wheels'
    env:
      CIBW_BUILD: "cp$(python.version)-*"
      CIBW_ENVIRONMENT: 'PATH="$HOME/.cargo/bin:$PATH"'
      CIBW_BEFORE_ALL: "curl https://sh.rustup.rs -sSf | sh -s -- -y && source $$HOME/.cargo/env && rustup target install $(rust.target)"
  - bash: python -m pip install --upgrade twine
    condition: and(succeeded(), startsWith(variables['python.version'], '3.'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Install deploy dependencies'
  - bash: twine upload --skip-existing dist/*
    condition: and(succeeded(), startsWith(variables['python.version'], '3.'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Deploy Python'
    env:
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: $(TWINE_PASSWORD)
  - bash: cargo publish
    condition: and(succeeded(), startsWith(variables['python.version'], '3.'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Deploy Rust'
    env:
      CARGO_REGISTRY_TOKEN: $(CARGO_REGISTRY_TOKEN)
